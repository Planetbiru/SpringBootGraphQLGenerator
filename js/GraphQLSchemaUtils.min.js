class GraphQLSchemaUtils{reservedTypes=["String","Int","Float","Boolean","ID"];normalizeNameForComparison(e){return e.replace(/[_\s]/g,"").toLowerCase()}normalizeEntity(e,n="snake"){let a={};for(let[t,r]of Object.entries(e)){let l=t;"snake"===n?l.includes("_")||(l=StringUtil.snakeize(l)):"camel"===n&&l.includes("_")&&(l=StringUtil.camelize(l)),a[l]=r.map(a=>{let{name:t,type:r,nullable:l}=a;if(!this.reservedTypes.includes(r)){let i=r;/id$/i.test(t)||(t=this.normalizeNameForComparison(t)===this.normalizeNameForComparison(i)?t+"Id":t);let o=e[i];if(o){let m=o.find(e=>this.normalizeNameForComparison(e.name)===this.normalizeNameForComparison(t));m&&(r=m.type)}}let s=t.includes("_");return"camel"===n?s&&(t=StringUtil.camelize(t)):"snake"===n&&!s&&/[a-z][A-Z]/.test(t)&&(t=StringUtil.snakeize(t)),"ID"===r&&(r="String"),{name:t,type:r,nullable:l}})}return a}parseGraphQLSchema(e){let n={types:{},inputs:{}},a=/(type|input)\s+(\w+)\s*\{([\s\S]*?)\}/g,t;for(;null!==(t=a.exec(e));){let r=t[1],l=t[2],i=t[3];if("Query"===l)continue;let o=[],m=/(\w+):\s*([\w!]+)/g,s;for(;null!==(s=m.exec(i));){let p=s[1],u=s[2],c=u.endsWith("!");c&&(u=u.slice(0,-1)),o.push({name:p,type:u,nullable:!c})}"type"===r?n.types[l]=o:"input"===r&&(n.inputs[l]=o)}return n}buildGraphQLSchema(e,n=!0,a="offset"){let t={CHAR:"String",VARCHAR:"String",TEXT:"String",LONGTEXT:"String",INT:"Int",INTEGER:"Int",BIGINT:"Int",SMALLINT:"Int",TINYINT:"Boolean",DECIMAL:"Float",NUMERIC:"Float",FLOAT:"Float",DOUBLE:"Float",REAL:"Float",BOOLEAN:"Boolean",DATE:"String",DATETIME:"String",TIMESTAMP:"String",TIME:"String",ENUM:"String",SET:"String"},r=`# GraphQL Schema generated by GraphQL Generator

`;return"cursor"===a?r+=`type PageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String!
    endCursor: String!
}

`:r+=`type PageInfo {
    totalCount: Int!
    totalPages: Int!
    currentPage: Int!
    pageSize: Int!
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
}
    
`,e.forEach(l=>{let i=StringUtil.upperCamel(l.name);if(r+=`
type ${i} {
`,l.columns.forEach(a=>{let i=!1,o=!1,m="";if(a.name.endsWith("_id")){let s=a.name.slice(0,-3),p=e.find(e=>e.name.toLowerCase()===s.toLowerCase());if(p&&p.name.toLowerCase()!==l.name.toLowerCase()){let u=StringUtil.upperCamel(p.name),c=StringUtil.camelize(p.name);m+=`    ${c}: ${u}${a.nullable?"":"!"}
`,i=!0}}if(i&&!a.nullable&&(o=!0),a.primaryKey&&(o=!0),a.primaryKey||i||a.nullable||(o=!0),!(n&&i)){let g;g=a.primaryKey?"ID":t[a.type.toUpperCase()]||"String",o&&(g+="!"),r+=`    ${StringUtil.camelize(a.name)}: ${g}
`}r+=m}),r+=`}
`,"cursor"===a){let o=`${i}Connection`,m=`${i}Edge`;r+=`
type ${o} {
    edges: [${m}]
    pageInfo: PageInfo!
}

type ${m} {
    node: ${i}
    cursor: String!
}
`}else{let s=`${i}Connection`;r+=`
type ${s} {
    pageInfo: PageInfo!
    data: [${i}]
}

`}}),e.forEach(n=>{let a=StringUtil.upperCamel(n.name)+"Create",l=StringUtil.upperCamel(n.name)+"Update",i=n.columns.filter(e=>e.primaryKey),o=i.length>1;r+=`
input ${a} {
`,n.columns.forEach(a=>{if(!a.autoIncrement){let l=a.name.endsWith("_id")&&e.some(e=>e.name.toLowerCase()===a.name.slice(0,-3).toLowerCase()&&e.name.toLowerCase()!==n.name.toLowerCase()),i;i=a.primaryKey||l?"ID":t[a.type.toUpperCase()]||"String";let m=o&&a.primaryKey||l&&!a.nullable||!a.primaryKey&&!l&&!a.nullable;m&&(i+="!"),r+=`    ${StringUtil.camelize(a.name)}: ${i}
`}}),r+=`}
`,r+=`
input ${l} {
`,n.columns.forEach(a=>{let l=a.name.endsWith("_id")&&e.some(e=>e.name.toLowerCase()===a.name.slice(0,-3).toLowerCase()&&e.name.toLowerCase()!==n.name.toLowerCase()),i;i=a.primaryKey||l?"ID":t[a.type.toUpperCase()]||"String";let m=o&&a.primaryKey||l&&!a.nullable||!a.primaryKey&&!l&&!a.nullable;m&&(i+="!"),r+=`    ${StringUtil.camelize(a.name)}: ${i}
`}),r+=`}
`}),r+=`
input DataFilter{
    fieldName: String,
    fieldValue: String
}
`,r+=`
input DataOrder{
    fieldName: String,
    orderType: String
}
`,r+=`
type Query {
`,e.forEach(e=>{let n=StringUtil.upperCamel(e.name),t=StringUtil.camelize(e.name),l=e.columns.filter(e=>e.primaryKey);if(l.length>0){let i=l.map(e=>{let n=StringUtil.camelize(e.name);return`${n}: ID`}).join(", "),o=`get${n}`;r+=`    ${o}(${i}): ${n}
`}let m=`${t}s`,s=`get${StringUtil.upperCamel(m)}`;"offset"===a?r+=`    ${s}(pageNumber: Int, pageSize: Int, dataFilter: [DataFilter], dataOrder: [DataOrder]): ${n}Connection
`:"cursor"===a&&(r+=`    ${s}(first: Int, after: String, last: Int, before: String): ${n}Connection
`)}),r+=`}
`,r+=`
type Mutation {
`,e.forEach(e=>{let n=StringUtil.upperCamel(e.name),a=`${n}Create`,t=`${n}Update`,l=e.columns.filter(e=>e.primaryKey);if(r+=`    create${n}(input: ${a}!): ${n}
`,r+=`    update${n}(input: ${t}!): ${n}
`,l.length>0){let i=l.map(e=>`${StringUtil.camelize(e.name)}: ID!`).join(", ");r+=`    delete${n}(${i}): Boolean
`}}),r+=`}
`}}